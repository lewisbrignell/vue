b2909918486e40f7242ffd53a249af8c47f0a1b1

----------------------------------------------

:: methods: {}

    the methods you know and love. they react to any DOM change


:: computed: {} 

    computed properties are like methods but are treated as static values.
    more efficient when dealing with specific changes; more context in how 
    they're fired
    they're cached and they only change when their dependencies change - don't accept arguments
    they know when their values change - methods don't
    computed properties have access to all data in your app's view

:: filters: {}

    filters like computed, are another type of function. filters don't have 
    the same access - they only have access to the values passed to them


:: directives: {}

    your own custom inline event directives like @click, etc.. !
    must always be prepended with 'v-'
    directives allow you to pass the focus element ( el ) to it easily


:: applying styles conditionally to elements - using v-bind

    e.g. v-bind:class="{ 'classname' : condition }"

    ** use this method - the 2nd one is just an interesting use **

:: applying styles conditionally to elements - using a computed property

    :style="errorStyle"  // errorStyle is a computed property

    // this returns a js object to the style attribute
    errorStyle () {
      if (this.message.length > 22) {
        return {
          color: 'red',
          background: 'pink'
        }
      }
      return null
    }


:: Lifecycle Hooks

    beforeCreate(): fired just before componeted is created

    created(): fired at the point that the Vue component is created - all data,
        markup and methods have been created but not commited to the component,
        only virtually

    beforeMount(): fired just before data/markup/methods are applied to the view

    mounted(): markup has been commited to the view - you can see it
        you'll wanna use this a lot - especially for initializing

  :: When Vue Component is updated:
    
    beforeUpdate(): fired just before update is applied to the view

    updated(): fired when the view is updated

  :: When Vue Component is destroyed:

    beforeDestroy(): fired just before the componented is destroyed

    destroyed(): fired at the point the component is destroyed